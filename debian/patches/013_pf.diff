--- a/src/contrib/pf/authpf/authpf.c
+++ b/src/contrib/pf/authpf/authpf.c
@@ -149,10 +149,12 @@
 		goto die;
 	}
 
+#if 0 /* we don't have pw_class */
 	if ((lc = login_getclass(pw->pw_class)) != NULL)
 		shell = login_getcapstr(lc, "shell", pw->pw_shell,
 		    pw->pw_shell);
 	else
+#endif
 		shell = pw->pw_shell;
 
 #if 0
@@ -520,9 +522,6 @@
 			}
 
 			if (buf[0] == '@') {
-				/* check login class */
-				if (strcmp(pw->pw_class, buf + 1) == 0)
-					matched++;
 			} else if (buf[0] == '%') {
 				/* check group membership */
 				int cnt; 
--- a/src/contrib/pf/ftp-proxy/ftp-proxy.c
+++ b/src/contrib/pf/ftp-proxy/ftp-proxy.c
@@ -103,7 +103,7 @@
 int	drop_privs(void);
 void	end_session(struct session *);
 void	exit_daemon(void);
-int	getline(char *, size_t *);
+int	bsd_getline(char *, size_t *);
 void	handle_connection(const int, short, void *);
 void	handle_signal(int, short, void *);
 struct session * init_session(void);
@@ -249,7 +249,7 @@
 		    buf_avail);
 		s->cbuf_valid += clientread;
 
-		while ((n = getline(s->cbuf, &s->cbuf_valid)) > 0) {
+		while ((n = bsd_getline(s->cbuf, &s->cbuf_valid)) > 0) {
 			logmsg(LOG_DEBUG, "#%d client: %s", s->id, linebuf);
 			if (!client_parse(s)) {
 				end_session(s);
@@ -343,7 +343,7 @@
 }
 
 int
-getline(char *buf, size_t *valid)
+bsd_getline(char *buf, size_t *valid)
 {
 	size_t i;
 
@@ -1087,7 +1087,7 @@
 		    buf_avail);
 		s->sbuf_valid += srvread;
 
-		while ((n = getline(s->sbuf, &s->sbuf_valid)) > 0) {
+		while ((n = bsd_getline(s->sbuf, &s->sbuf_valid)) > 0) {
 			logmsg(LOG_DEBUG, "#%d server: %s", s->id, linebuf);
 			if (!server_parse(s)) {
 				end_session(s);
--- a/src/sbin/pfctl/pfctl_parser.h
+++ b/src/sbin/pfctl/pfctl_parser.h
@@ -159,6 +159,8 @@
 	}			 data;
 };
 
+#define	SIMPLEQ_END(head)		NULL
+
 #ifdef __FreeBSD__
 /*
  * XXX
@@ -169,7 +171,6 @@
 #define	SIMPLEQ_HEAD_INITIALIZER	STAILQ_HEAD_INITIALIZER
 #define	SIMPLEQ_ENTRY			STAILQ_ENTRY
 #define	SIMPLEQ_FIRST			STAILQ_FIRST
-#define	SIMPLEQ_END(head)		NULL
 #define	SIMPLEQ_EMPTY			STAILQ_EMPTY
 #define	SIMPLEQ_NEXT			STAILQ_NEXT
 /*#define	SIMPLEQ_FOREACH			STAILQ_FOREACH*/
